#!/bin/bash

# Load common tools
EXTERNAL_BUILDKITE_REPO="$( cd "$( dirname "$( dirname "${BASH_SOURCE[0]}" )" )" &> /dev/null && pwd )"
source "${EXTERNAL_BUILDKITE_REPO}/lib/common.sh"



# The external repository that we will clone.
# Example value: https://github.com/JuliaCI/julia-buildkite
INPUT_REPO_URL="$(get_meta_env_value REPO_URL)"

# Folder the external repository will be cloned into, defaults to `.buildkite`
INPUT_FOLDER="$(get_meta_env_value FOLDER .buildkite)"

# Version of the external repository that we're going to clone
# This can be a gitsha, a gitref, or a file containing one of the two
INPUT_VERSION="$(get_meta_env_value VERSION)"


# Clone external repo to the local path:
git clone "${INPUT_REPO_URL}" "${INPUT_FOLDER}"

# Resolve the version, now that we have all the files locally:
RESOLVED_VERSION="$(resolve_version "${INPUT_VERSION}" "${INPUT_FOLDER}")"

# Check out the resolved version
git -C "${INPUT_FOLDER}" checkout "${RESOLVED_VERSION}"

# Report the values via environment variables
export BUILDKITE_PLUGIN_EXTERNAL_BUILDKITE_VERSION="${RESOLVED_VERSION}"
export BUILDKITE_PLUGIN_EXTERNAL_BUILDKITE_REPO_URL="${INPUT_REPO_URL}"
export BUILDKITE_PLUGIN_EXTERNAL_BUILDKITE_FOLDER="${INPUT_FOLDER}"

# Also set them via metadata, if we have it available
if which buildkite-agent >/dev/null 2>/dev/null; then
    buildkite-agent metadata set BUILDKITE_PLUGIN_EXTERNAL_BUILDKITE_VERSION "${RESOLVED_VERSION}"
    buildkite-agent metadata set BUILDKITE_PLUGIN_EXTERNAL_BUILDKITE_REPO_URL "${INPUT_REPO_URL}"
    buildkite-agent metadata set BUILDKITE_PLUGIN_EXTERNAL_BUILDKITE_FOLDER "${INPUT_FOLDER}"
fi